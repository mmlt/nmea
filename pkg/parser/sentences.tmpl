package parser

// Code generated by generate.sh DO NOT EDIT.

import (
    "fmt"
    "io"
)

// ParserFunc
type parserFunc func(Base) (Sentence, error)

var parsers = map[string]parserFunc{
{{- range (ds "spec").items }}
    "{{ .id }}": parse{{ .id }},
{{- end }}
}

// PrinterFunc
type printerFunc func(Sentence, io.Writer) error

var printers = map[string]printerFunc{
{{- range (ds "spec").items }}
    "{{ .id }}": print{{ .id }},
{{- end }}
}

{{- range $i, $item := (ds "spec").items }}

/***** {{ $item.id }} - {{ $item.name }} *****/

type {{ $item.id }} struct {
    Base
    {{- range $item.fields }}
    {{ .name }} {{ .zz_type }}
    {{- end }}
}

func parse{{ $item.id }}(b Base) (Sentence, error) {
    var err error
    r := {{ $item.id }}{Base: b}
    {{- range $item.fields }}
    r.{{ .name }}, err = Parse{{ .type }}(b.Fields[{{ .zz_i }}]{{ range .zz_xarg }},b.Fields[{{ . }}]{{ end }})
    if err != nil {
        return r, fmt.Errorf("{{ .name }}: %w", err)
    }
    {{- end }}
    return r, nil
}

func print{{ $item.id }}(s Sentence, w io.Writer) error {
    x := s.({{ $item.id }})
    {{- range $item.fields }}
    fmt.Fprint(w, ",", Print{{ .type }}(x.{{ .name }}))
    {{- end }}
    return nil
}

{{- end }}
