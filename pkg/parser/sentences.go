package parser

// Code generated by generate.sh DO NOT EDIT.

import (
    "fmt"
    "io"
)

// ParserFunc
type parserFunc func(Base) (Sentence, error)

var parsers = map[string]parserFunc{
    "AAM": parseAAM,
    "GGA": parseGGA,
}

// PrinterFunc
type printerFunc func(Sentence, io.Writer) error

var printers = map[string]printerFunc{
    "AAM": printAAM,
    "GGA": printGGA,
}

/***** AAM - Waypoint Arrival Alarm *****/

type AAM struct {
    Base
    ArrivalCircleEntered bool
    PerpendicularPassed bool
    ArrivalCircleRadius Distance
    DestinationWaypointID string
}

func parseAAM(b Base) (Sentence, error) {
    var err error
    r := AAM{Base: b}
    r.ArrivalCircleEntered, err = ParseBoolAV(b.Fields[0])
    if err != nil {
        return r, fmt.Errorf("ArrivalCircleEntered: %w", err)
    }
    r.PerpendicularPassed, err = ParseBoolAV(b.Fields[1])
    if err != nil {
        return r, fmt.Errorf("PerpendicularPassed: %w", err)
    }
    r.ArrivalCircleRadius, err = ParseDistance(b.Fields[2],b.Fields[3])
    if err != nil {
        return r, fmt.Errorf("ArrivalCircleRadius: %w", err)
    }
    r.DestinationWaypointID, err = ParseString(b.Fields[4])
    if err != nil {
        return r, fmt.Errorf("DestinationWaypointID: %w", err)
    }
    return r, nil
}

func printAAM(s Sentence, w io.Writer) error {
    x := s.(AAM)
    fmt.Fprint(w, ",", PrintBoolAV(x.ArrivalCircleEntered))
    fmt.Fprint(w, ",", PrintBoolAV(x.PerpendicularPassed))
    fmt.Fprint(w, ",", PrintDistance(x.ArrivalCircleRadius))
    fmt.Fprint(w, ",", PrintString(x.DestinationWaypointID))
    return nil
}

/***** GGA - GPS fix *****/

type GGA struct {
    Base
    Time Time
    Latitude Coordinate
    Longitude Coordinate
    FixQuality int64
    NumSatellites int64
    HDOP float64
    Altitude Distance
    Separation Distance
    DGPSAge string
    DGPSId string
}

func parseGGA(b Base) (Sentence, error) {
    var err error
    r := GGA{Base: b}
    r.Time, err = ParseTime(b.Fields[0])
    if err != nil {
        return r, fmt.Errorf("Time: %w", err)
    }
    r.Latitude, err = ParseCoordinate(b.Fields[1],b.Fields[2])
    if err != nil {
        return r, fmt.Errorf("Latitude: %w", err)
    }
    r.Longitude, err = ParseCoordinate(b.Fields[3],b.Fields[4])
    if err != nil {
        return r, fmt.Errorf("Longitude: %w", err)
    }
    r.FixQuality, err = ParseFixQuality(b.Fields[5])
    if err != nil {
        return r, fmt.Errorf("FixQuality: %w", err)
    }
    r.NumSatellites, err = ParseInt(b.Fields[6])
    if err != nil {
        return r, fmt.Errorf("NumSatellites: %w", err)
    }
    r.HDOP, err = ParseFloat(b.Fields[7])
    if err != nil {
        return r, fmt.Errorf("HDOP: %w", err)
    }
    r.Altitude, err = ParseDistance(b.Fields[8],b.Fields[9])
    if err != nil {
        return r, fmt.Errorf("Altitude: %w", err)
    }
    r.Separation, err = ParseDistance(b.Fields[10],b.Fields[11])
    if err != nil {
        return r, fmt.Errorf("Separation: %w", err)
    }
    r.DGPSAge, err = ParseString(b.Fields[12])
    if err != nil {
        return r, fmt.Errorf("DGPSAge: %w", err)
    }
    r.DGPSId, err = ParseString(b.Fields[13])
    if err != nil {
        return r, fmt.Errorf("DGPSId: %w", err)
    }
    return r, nil
}

func printGGA(s Sentence, w io.Writer) error {
    x := s.(GGA)
    fmt.Fprint(w, ",", PrintTime(x.Time))
    fmt.Fprint(w, ",", PrintCoordinate(x.Latitude))
    fmt.Fprint(w, ",", PrintCoordinate(x.Longitude))
    fmt.Fprint(w, ",", PrintFixQuality(x.FixQuality))
    fmt.Fprint(w, ",", PrintInt(x.NumSatellites))
    fmt.Fprint(w, ",", PrintFloat(x.HDOP))
    fmt.Fprint(w, ",", PrintDistance(x.Altitude))
    fmt.Fprint(w, ",", PrintDistance(x.Separation))
    fmt.Fprint(w, ",", PrintString(x.DGPSAge))
    fmt.Fprint(w, ",", PrintString(x.DGPSId))
    return nil
}
