package gpsd

import (
	"testing"
)

func TestParser(t *testing.T) {
	in := `=== AAM - Waypoint Arrival Alarm

This sentence is generated by some units to indicate the status of
arrival (entering the arrival circle, or passing the perpendicular of
the course line) at the destination waypoint.

------------------------------------------------------------------------------
		1 2 3   4 5    6
		| | |   | |    |
	$--AAM,A,A,x.x,N,c--c*hh<CR><LF>
------------------------------------------------------------------------------

Field Number:

1. Status, BOOLEAN, A = Arrival circle entered, V = not passed
2. Status, BOOLEAN, A = perpendicular passed at waypoint, V = not passed
3. Arrival circle radius
4. Units of radius, nautical miles
5. Waypoint ID
6. Checksum

Example: GPAAM,A,A,0.10,N,WPTNME*43

WPTNME is the waypoint name.
`

	p := &parser{Buffer: in}
	p.Init()
	if err := p.Parse(); err != nil {
		t.Fatal(err)
	}
}

// func TestCalculator(t *testing.T) {
// 	expression := "( 1 - -3 ) / 3 + 2 * ( 3 + -4 ) + 3 % 2^2"
// 	calc := &Calculator{Buffer: expression}
// 	calc.Init()
// 	calc.Expression.Init(expression)
// 	if err := calc.Parse(); err != nil {
// 		t.Fatal(err)
// 	}
// 	// calc.Execute()
// 	if calc.Evaluate().Cmp(big.NewInt(2)) != 0 {
// 		t.Fatal("got incorrect result")
// 	}
// }
