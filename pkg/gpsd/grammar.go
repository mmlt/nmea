package gpsd

// Code generated by peg -noast -switch -inline -strict -output grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSentence
	ruleTitle
	ruleMnemonic
	ruleShortDescription
	ruleLongDescription
	ruletextline
	ruleCodeblock
	ruleFields
	ruleMisc
	rulesp
	rulenl
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
)

var rul3s = [...]string{
	"Unknown",
	"Sentence",
	"Title",
	"Mnemonic",
	"ShortDescription",
	"LongDescription",
	"textline",
	"Codeblock",
	"Fields",
	"Misc",
	"sp",
	"nl",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type parser struct {
	Buffer string
	buffer []rune
	rules  [16]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
		text                 string
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		if matches {
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Sentence <- <(Title LongDescription Codeblock Fields Misc !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					if buffer[position] != rune('=') {
						goto l0
					}
					position++
					if buffer[position] != rune('=') {
						goto l0
					}
					position++
					if buffer[position] != rune('=') {
						goto l0
					}
					position++
					if !_rules[rulesp]() {
						goto l0
					}
					{
						position3 := position
						{
							position4 := position
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l0
							}
							position++
						l5:
							{
								position6, tokenIndex6 := position, tokenIndex
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l6
								}
								position++
								goto l5
							l6:
								position, tokenIndex = position6, tokenIndex6
							}
							begin := position4
							end := position
							text = string(buffer[begin:end])
						}
						{
							fmt.Println("Mnemonic", text)
						}
						add(ruleMnemonic, position3)
					}
					if !_rules[rulesp]() {
						goto l0
					}
					if buffer[position] != rune('-') {
						goto l0
					}
					position++
					if !_rules[rulesp]() {
						goto l0
					}
					{
						position8 := position
						{
							position9 := position
							if !matchDot() {
								goto l0
							}
						l10:
							{
								position11, tokenIndex11 := position, tokenIndex
								if !matchDot() {
									goto l11
								}
								goto l10
							l11:
								position, tokenIndex = position11, tokenIndex11
							}
							begin := position9
							end := position
							text = string(buffer[begin:end])
						}
						{
							fmt.Println("ShortDescription", text)
						}
						add(ruleShortDescription, position8)
					}
					if !_rules[rulenl]() {
						goto l0
					}
					add(ruleTitle, position2)
				}
				{
					position13 := position
					if !_rules[ruletextline]() {
						goto l0
					}
					if !_rules[ruletextline]() {
						goto l0
					}
					if !_rules[rulenl]() {
						goto l0
					}
					add(ruleLongDescription, position13)
				}
				{
					position14 := position
					if !_rules[rulenl]() {
						goto l0
					}
					add(ruleCodeblock, position14)
				}
				{
					position15 := position
					if !_rules[rulenl]() {
						goto l0
					}
					add(ruleFields, position15)
				}
				{
					position16 := position
					if !_rules[rulenl]() {
						goto l0
					}
					add(ruleMisc, position16)
				}
				{
					position17, tokenIndex17 := position, tokenIndex
					if !matchDot() {
						goto l17
					}
					goto l0
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				add(ruleSentence, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Title <- <('=' '=' '=' sp Mnemonic sp '-' sp ShortDescription nl)> */
		nil,
		/* 2 Mnemonic <- <(<[A-Z]+> Action0)> */
		nil,
		/* 3 ShortDescription <- <(<.+> Action1)> */
		nil,
		/* 4 LongDescription <- <(textline textline nl)> */
		nil,
		/* 5 textline <- <(<(!'\n' .)+> Action2)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24 := position
					{
						position27, tokenIndex27 := position, tokenIndex
						if buffer[position] != rune('\n') {
							goto l27
						}
						position++
						goto l22
					l27:
						position, tokenIndex = position27, tokenIndex27
					}
					if !matchDot() {
						goto l22
					}
				l25:
					{
						position26, tokenIndex26 := position, tokenIndex
						{
							position28, tokenIndex28 := position, tokenIndex
							if buffer[position] != rune('\n') {
								goto l28
							}
							position++
							goto l26
						l28:
							position, tokenIndex = position28, tokenIndex28
						}
						if !matchDot() {
							goto l26
						}
						goto l25
					l26:
						position, tokenIndex = position26, tokenIndex26
					}
					begin := position24
					end := position
					text = string(buffer[begin:end])
				}
				{
					fmt.Println("LongDescription", text)
				}
				add(ruletextline, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 6 Codeblock <- <nl> */
		nil,
		/* 7 Fields <- <nl> */
		nil,
		/* 8 Misc <- <nl> */
		nil,
		/* 9 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position34 := position
			l35:
				{
					position36, tokenIndex36 := position, tokenIndex
					{
						position37, tokenIndex37 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l38
						}
						position++
						goto l37
					l38:
						position, tokenIndex = position37, tokenIndex37
						if buffer[position] != rune('\t') {
							goto l36
						}
						position++
					}
				l37:
					goto l35
				l36:
					position, tokenIndex = position36, tokenIndex36
				}
				add(rulesp, position34)
			}
			return true
		},
		/* 10 nl <- <'\n'> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				if buffer[position] != rune('\n') {
					goto l39
				}
				position++
				add(rulenl, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		nil,
		/* 13 Action0 <- <{ fmt.Println("Mnemonic", text) }> */
		nil,
		/* 14 Action1 <- <{ fmt.Println("ShortDescription", text) }> */
		nil,
		/* 15 Action2 <- <{ fmt.Println("LongDescription", text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
